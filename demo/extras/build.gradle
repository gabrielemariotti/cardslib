apply plugin: 'android-sdk-manager'
apply plugin: 'android'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
    }

    signingConfigs {
        release
    }

    buildTypes {
        if (isReleaseBuild()) {
            release {
                signingConfig signingConfigs.release
            }
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
    }
}

dependencies {
    // Cards Library
    compile project(':library')
    compile project(':library-extra')

    // Support Libraries
    compile 'com.android.support:support-v4:19.1.0'

    //OkHttp
    compile 'com.squareup.okhttp:okhttp:1.6.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:1.6.0'
    //Picasso
    compile 'com.squareup.picasso:picasso:2.3.1'

    //Ion
    compile 'com.koushikdutta.ion:ion:1.2.7'

    //universal-image-loader
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.1'

    //Actionbar pull to refresh
    compile 'com.github.chrisbanes.actionbarpulltorefresh:library:0.9.9'

    //lListViewAnimations
    compile 'com.nhaarman.listviewanimations:library:2.6.0'

    //Crouton
    compile('de.keyboardsurfer.android.widget:crouton:1.8.4') {
        // exclusion is not neccessary, but generally a good idea.
        exclude group: 'com.google.android', module: 'support-v4'
    }

    //StickyListHeaders
    compile ('se.emilsjolander:stickylistheaders:2.4.0')

    //Weather Lib
    compile 'com.survivingwithandroid:weatherlib:1.3.2'

    // Fading ActionBar
    compile 'com.github.manuelpeinado.fadingactionbar:fadingactionbar:3.0.0'
}


def Properties props = new Properties()
def propFile = file('../../signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        println 'RELEASE BUILD SIGNING'

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'RELEASE BUILD NOT FOUND SIGNING PROPERTIES'

        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'RELEASE BUILD NOT FOUND SIGNING FILE'
    android.buildTypes.release.signingConfig = null
}